// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name,
  description,
  start_time
) VALUES (
  ?, ?, ?
)
RETURNING id, name, description, start_time, end_time
`

type CreateEventParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	StartTime   int64  `json:"start_time"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.Name, arg.Description, arg.StartTime)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = ?
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getAllEvents = `-- name: GetAllEvents :many
SELECT id, name, description, start_time, end_time FROM events
ORDER BY id
`

func (q *Queries) GetAllEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, description, start_time, end_time FROM events
WHERE id = ? LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, name, description, start_time, end_time FROM events
WHERE ?1 <= start_time AND start_time <= ?2
ORDER BY start_time
`

type GetEventsParams struct {
	Start int64 `json:"start"`
	End   int64 `json:"end"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents, arg.Start, arg.End)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
set name = ?
WHERE id = ?
RETURNING id, name, description, start_time, end_time
`

type UpdateEventParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent, arg.Name, arg.ID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}
